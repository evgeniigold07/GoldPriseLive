const TelegramBot = require("node-telegram-bot-api");
const fetch = require("node-fetch");
const fs = require("fs");
const { exec } = require("child_process");

// üîë –ö–ª—é—á–∏
const TELEGRAM_BOT_TOKEN = "7620924463:AAE231OC4JlP5dKsf9qUQ4GNA364iEyeklQ";
const CHANNEL_ID = "@goldpriselive";
const TWELVE_API_KEY = "1b100a43c7504893a0fa01efd0520981";

// üí° –ü—Ä–æ–≤–µ—Ä–∫–∞: –º–æ—è –≤–µ—Ä—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞!
console.log("üí° –ú–æ—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞!");

// üïí –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ –∏ –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
function isMarketOpen() {
  const now = new Date();
  const utcDay = now.getUTCDay();
  const utcHour = now.getUTCHours();

  if (
    (utcDay === 5 && utcHour >= 21) ||
    utcDay === 6 ||
    (utcDay === 0 && utcHour < 22)
  ) {
    return false;
  }

  return true;
}

// üî¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–æ–ª–æ—Ç–∞
async function getGoldPrice() {
  try {
    const url = `https://api.twelvedata.com/price?symbol=XAU/USD&apikey=${TWELVE_API_KEY}`;
    const response = await fetch(url);
    const data = await response.json();
    return parseFloat(data.price);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã:", error);
    return null;
  }
}

// üì∑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Å TradingView
async function captureChartScreenshot() {
  const url =
    "https://www.tradingview.com/chart/?symbol=OANDA:XAUUSD&interval=5";

  const cmd = `node screenshot.js "${url}"`;
  return new Promise((resolve, reject) => {
    exec(cmd, (error, stdout, stderr) => {
      if (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:", error);
        reject(error);
      } else {
        resolve(stdout.trim());
      }
    });
  });
}

// ü§ñ –ë–æ—Ç
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });

let lastPrice = 0;

async function sendPriceUpdate() {
  if (!isMarketOpen()) {
    console.log("‚è≥ –†—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.");
    return;
  }

  const price = await getGoldPrice();
  if (!price) return;

  const direction = price > lastPrice ? "üü¢" : "üî¥";
  lastPrice = price;

  const message = `${direction} XAU/USD: $${price}\n\n#XAUUSD #gold #forex #trading #goldprice #chart #financialmarkets`;

  try {
    const screenshotPath = await captureChartScreenshot();
    bot.sendPhoto(CHANNEL_ID, screenshotPath, {
      caption: message,
    });
    console.log(`[‚úì] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${message}`);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∫—Ä–∏–Ω–∞:", err);
  }
}

// ‚è± –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(sendPriceUpdate, 5 * 60 * 1000);
